program LCDDriver;
//CS =PORTB0
//RES=PORTB1
//RS =PORTC3
//RW =PORTC4
//E  =PORTC5
   
procedure InitPortsIO;
begin
     DDRD :=%11111111;
     DDRB :=%00010011;
     DDRC :=%00111000;
     PORTC:=%00000011;
end;

procedure WriteData(dat:byte);
begin
     asm
        CBI PORTC,4
        CBI PORTC,3
        SBI PORTC,5
        OUT PORTD,R2
        CBI PORTC,5
        SBI PORTB,0
     end;
     delay_us(1);
end;

procedure WriteCommand(dat:byte);
begin
     asm
        CBI PORTB,0
        CBI PORTC,4
        SBI PORTC,3
        SBI PORTC,5
        OUT PORTD,R2
        CBI PORTC,5
     end;
     delay_us(1);
end;

procedure SetByteAdrCursor(LowAdrByte,HighAdrByte:byte);
begin
     //low order address cursor
     WriteCommand(%00001010);
     WriteData(LowAdrByte);
     //high order address cursor
     WriteCommand(%00001011);
     WriteData(HighAdrByte);
end;


procedure EnableLcd;
begin
     asm
        SBI PORTB,1
     end;
end;

procedure InitSPI;
begin
     asm
        SBI SPCR,6
     end;
end;

procedure InitLC7981;
var
   i:word;
begin
     //Reset display
       EnableLcd;
     //1)Mode Control
       WriteCommand(%00000000);
       WriteData(%00110010);
     //2)Set Character Pitch
       WriteCommand(%00000001);
       WriteData(%00000111);
     //3)Set Number of Characters
       WriteCommand(%00000010);
       WriteData(%00011101);
     //4)Set Number of Time Divisions (Inverse of Display Duty Ratio)
       WriteCommand(%00000011);
       WriteData(%01111111);
     //5)Set Cursor Position
       WriteCommand(%00000100);
       WriteData(%00000000);
     //6)Set Display Start Low Order Address
       //Low order address
       WriteCommand(%00001000);
       WriteData(%00000000);
       //high order address
       WriteCommand(%00001001);
       WriteData(%00000000);
     //Clear Display
       SetByteAdrCursor(0,0);
       for i:=0 to 3840 do
       begin
          WriteCommand(%00001100);
          WriteData(0);
       end;
       SetByteAdrCursor(0,0);
end;


function ReadSPI():Byte;
begin
     asm
     WaitReception:
        ;Wait for reception complete
        sbis SPSR,SPIF
        rjmp WaitReception
     end;
     //Read received data and return
     ReadSPI:=SPDR;
end;


{------------------------------------------------------------}
begin
     InitPortsIO;
     InitLC7981;
     InitSPI;
     while true do
     begin
          if PINB3_bit=1 then
          begin
                    WriteCommand(ReadSPI);
                    WriteData(ReadSPI);
          end;
     end;
end.